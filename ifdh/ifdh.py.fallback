# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ifdh', [dirname(__file__)])
        except ImportError:
            import _ifdh
            return _ifdh
        if fp is not None:
            try:
                _mod = imp.load_module('_ifdh', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ifdh = swig_import_helper()
    del swig_import_helper
else:
    import _ifdh
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ifdh.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ifdh.SwigPyIterator_value(self)
    def incr(self, n = 1): return _ifdh.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _ifdh.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ifdh.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ifdh.SwigPyIterator_equal(self, *args)
    def copy(self): return _ifdh.SwigPyIterator_copy(self)
    def next(self): return _ifdh.SwigPyIterator_next(self)
    def __next__(self): return _ifdh.SwigPyIterator___next__(self)
    def previous(self): return _ifdh.SwigPyIterator_previous(self)
    def advance(self, *args): return _ifdh.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ifdh.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ifdh.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ifdh.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ifdh.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ifdh.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ifdh.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ifdh.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifdh.vectors_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifdh.vectors___nonzero__(self)
    def __bool__(self): return _ifdh.vectors___bool__(self)
    def __len__(self): return _ifdh.vectors___len__(self)
    def pop(self): return _ifdh.vectors_pop(self)
    def __getslice__(self, *args): return _ifdh.vectors___getslice__(self, *args)
    def __setslice__(self, *args): return _ifdh.vectors___setslice__(self, *args)
    def __delslice__(self, *args): return _ifdh.vectors___delslice__(self, *args)
    def __delitem__(self, *args): return _ifdh.vectors___delitem__(self, *args)
    def __getitem__(self, *args): return _ifdh.vectors___getitem__(self, *args)
    def __setitem__(self, *args): return _ifdh.vectors___setitem__(self, *args)
    def append(self, *args): return _ifdh.vectors_append(self, *args)
    def empty(self): return _ifdh.vectors_empty(self)
    def size(self): return _ifdh.vectors_size(self)
    def clear(self): return _ifdh.vectors_clear(self)
    def swap(self, *args): return _ifdh.vectors_swap(self, *args)
    def get_allocator(self): return _ifdh.vectors_get_allocator(self)
    def begin(self): return _ifdh.vectors_begin(self)
    def end(self): return _ifdh.vectors_end(self)
    def rbegin(self): return _ifdh.vectors_rbegin(self)
    def rend(self): return _ifdh.vectors_rend(self)
    def pop_back(self): return _ifdh.vectors_pop_back(self)
    def erase(self, *args): return _ifdh.vectors_erase(self, *args)
    def __init__(self, *args): 
        this = _ifdh.new_vectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ifdh.vectors_push_back(self, *args)
    def front(self): return _ifdh.vectors_front(self)
    def back(self): return _ifdh.vectors_back(self)
    def assign(self, *args): return _ifdh.vectors_assign(self, *args)
    def resize(self, *args): return _ifdh.vectors_resize(self, *args)
    def insert(self, *args): return _ifdh.vectors_insert(self, *args)
    def reserve(self, *args): return _ifdh.vectors_reserve(self, *args)
    def capacity(self): return _ifdh.vectors_capacity(self)
    __swig_destroy__ = _ifdh.delete_vectors
    __del__ = lambda self : None;
vectors_swigregister = _ifdh.vectors_swigregister
vectors_swigregister(vectors)

class vectorpsl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorpsl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorpsl, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifdh.vectorpsl_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifdh.vectorpsl___nonzero__(self)
    def __bool__(self): return _ifdh.vectorpsl___bool__(self)
    def __len__(self): return _ifdh.vectorpsl___len__(self)
    def pop(self): return _ifdh.vectorpsl_pop(self)
    def __getslice__(self, *args): return _ifdh.vectorpsl___getslice__(self, *args)
    def __setslice__(self, *args): return _ifdh.vectorpsl___setslice__(self, *args)
    def __delslice__(self, *args): return _ifdh.vectorpsl___delslice__(self, *args)
    def __delitem__(self, *args): return _ifdh.vectorpsl___delitem__(self, *args)
    def __getitem__(self, *args): return _ifdh.vectorpsl___getitem__(self, *args)
    def __setitem__(self, *args): return _ifdh.vectorpsl___setitem__(self, *args)
    def append(self, *args): return _ifdh.vectorpsl_append(self, *args)
    def empty(self): return _ifdh.vectorpsl_empty(self)
    def size(self): return _ifdh.vectorpsl_size(self)
    def clear(self): return _ifdh.vectorpsl_clear(self)
    def swap(self, *args): return _ifdh.vectorpsl_swap(self, *args)
    def get_allocator(self): return _ifdh.vectorpsl_get_allocator(self)
    def begin(self): return _ifdh.vectorpsl_begin(self)
    def end(self): return _ifdh.vectorpsl_end(self)
    def rbegin(self): return _ifdh.vectorpsl_rbegin(self)
    def rend(self): return _ifdh.vectorpsl_rend(self)
    def pop_back(self): return _ifdh.vectorpsl_pop_back(self)
    def erase(self, *args): return _ifdh.vectorpsl_erase(self, *args)
    def __init__(self, *args): 
        this = _ifdh.new_vectorpsl(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ifdh.vectorpsl_push_back(self, *args)
    def front(self): return _ifdh.vectorpsl_front(self)
    def back(self): return _ifdh.vectorpsl_back(self)
    def assign(self, *args): return _ifdh.vectorpsl_assign(self, *args)
    def resize(self, *args): return _ifdh.vectorpsl_resize(self, *args)
    def insert(self, *args): return _ifdh.vectorpsl_insert(self, *args)
    def reserve(self, *args): return _ifdh.vectorpsl_reserve(self, *args)
    def capacity(self): return _ifdh.vectorpsl_capacity(self)
    __swig_destroy__ = _ifdh.delete_vectorpsl
    __del__ = lambda self : None;
vectorpsl_swigregister = _ifdh.vectorpsl_swigregister
vectorpsl_swigregister(vectorpsl)

class mapsvs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapsvs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapsvs, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifdh.mapsvs_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifdh.mapsvs___nonzero__(self)
    def __bool__(self): return _ifdh.mapsvs___bool__(self)
    def __len__(self): return _ifdh.mapsvs___len__(self)
    def __getitem__(self, *args): return _ifdh.mapsvs___getitem__(self, *args)
    def __delitem__(self, *args): return _ifdh.mapsvs___delitem__(self, *args)
    def has_key(self, *args): return _ifdh.mapsvs_has_key(self, *args)
    def keys(self): return _ifdh.mapsvs_keys(self)
    def values(self): return _ifdh.mapsvs_values(self)
    def items(self): return _ifdh.mapsvs_items(self)
    def __contains__(self, *args): return _ifdh.mapsvs___contains__(self, *args)
    def key_iterator(self): return _ifdh.mapsvs_key_iterator(self)
    def value_iterator(self): return _ifdh.mapsvs_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _ifdh.mapsvs___setitem__(self, *args)
    def __init__(self, *args): 
        this = _ifdh.new_mapsvs(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _ifdh.mapsvs_empty(self)
    def size(self): return _ifdh.mapsvs_size(self)
    def clear(self): return _ifdh.mapsvs_clear(self)
    def swap(self, *args): return _ifdh.mapsvs_swap(self, *args)
    def get_allocator(self): return _ifdh.mapsvs_get_allocator(self)
    def begin(self): return _ifdh.mapsvs_begin(self)
    def end(self): return _ifdh.mapsvs_end(self)
    def rbegin(self): return _ifdh.mapsvs_rbegin(self)
    def rend(self): return _ifdh.mapsvs_rend(self)
    def count(self, *args): return _ifdh.mapsvs_count(self, *args)
    def erase(self, *args): return _ifdh.mapsvs_erase(self, *args)
    def find(self, *args): return _ifdh.mapsvs_find(self, *args)
    def lower_bound(self, *args): return _ifdh.mapsvs_lower_bound(self, *args)
    def upper_bound(self, *args): return _ifdh.mapsvs_upper_bound(self, *args)
    __swig_destroy__ = _ifdh.delete_mapsvs
    __del__ = lambda self : None;
mapsvs_swigregister = _ifdh.mapsvs_swigregister
mapsvs_swigregister(mapsvs)

class ifdh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ifdh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ifdh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_debug"] = _ifdh.ifdh__debug_set
    __swig_getmethods__["_debug"] = _ifdh.ifdh__debug_get
    if _newclass:_debug = _swig_property(_ifdh.ifdh__debug_get, _ifdh.ifdh__debug_set)
    __swig_setmethods__["_default_base_uri"] = _ifdh.ifdh__default_base_uri_set
    __swig_getmethods__["_default_base_uri"] = _ifdh.ifdh__default_base_uri_get
    if _newclass:_default_base_uri = _swig_property(_ifdh.ifdh__default_base_uri_get, _ifdh.ifdh__default_base_uri_set)
    __swig_setmethods__["_default_base_ssl_uri"] = _ifdh.ifdh__default_base_ssl_uri_set
    __swig_getmethods__["_default_base_ssl_uri"] = _ifdh.ifdh__default_base_ssl_uri_get
    if _newclass:_default_base_ssl_uri = _swig_property(_ifdh.ifdh__default_base_ssl_uri_get, _ifdh.ifdh__default_base_ssl_uri_set)
    def __init__(self, baseuri = ""): 
        this = _ifdh.new_ifdh(baseuri)
        try: self.this.append(this)
        except: self.this = this
    def set_debug(self, *args): return _ifdh.ifdh_set_debug(self, *args)
    def set_base_uri(self, *args): return _ifdh.ifdh_set_base_uri(self, *args)
    def cp(self, *args): return _ifdh.ifdh_cp(self, *args)
    def fetchInput(self, *args): return _ifdh.ifdh_fetchInput(self, *args)
    def localPath(self, *args): return _ifdh.ifdh_localPath(self, *args)
    def addOutputFile(self, *args): return _ifdh.ifdh_addOutputFile(self, *args)
    def copyBackOutput(self, *args): return _ifdh.ifdh_copyBackOutput(self, *args)
    def log(self, *args): return _ifdh.ifdh_log(self, *args)
    def enterState(self, *args): return _ifdh.ifdh_enterState(self, *args)
    def leaveState(self, *args): return _ifdh.ifdh_leaveState(self, *args)
    def createDefinition(self, *args): return _ifdh.ifdh_createDefinition(self, *args)
    def deleteDefinition(self, *args): return _ifdh.ifdh_deleteDefinition(self, *args)
    def describeDefinition(self, *args): return _ifdh.ifdh_describeDefinition(self, *args)
    def translateConstraints(self, *args): return _ifdh.ifdh_translateConstraints(self, *args)
    def locateFile(self, *args): return _ifdh.ifdh_locateFile(self, *args)
    def getMetadata(self, *args): return _ifdh.ifdh_getMetadata(self, *args)
    def dumpStation(self, *args): return _ifdh.ifdh_dumpStation(self, *args)
    def startProject(self, *args): return _ifdh.ifdh_startProject(self, *args)
    def findProject(self, *args): return _ifdh.ifdh_findProject(self, *args)
    def establishProcess(self, *args): return _ifdh.ifdh_establishProcess(self, *args)
    def getNextFile(self, *args): return _ifdh.ifdh_getNextFile(self, *args)
    def updateFileStatus(self, *args): return _ifdh.ifdh_updateFileStatus(self, *args)
    def endProcess(self, *args): return _ifdh.ifdh_endProcess(self, *args)
    def dumpProject(self, *args): return _ifdh.ifdh_dumpProject(self, *args)
    def setStatus(self, *args): return _ifdh.ifdh_setStatus(self, *args)
    def endProject(self, *args): return _ifdh.ifdh_endProject(self, *args)
    def cleanup(self): return _ifdh.ifdh_cleanup(self)
    def renameOutput(self, *args): return _ifdh.ifdh_renameOutput(self, *args)
    def mv(self, *args): return _ifdh.ifdh_mv(self, *args)
    def ls(self, *args): return _ifdh.ifdh_ls(self, *args)
    def mkdir(self, *args): return _ifdh.ifdh_mkdir(self, *args)
    def rm(self, *args): return _ifdh.ifdh_rm(self, *args)
    def rmdir(self, *args): return _ifdh.ifdh_rmdir(self, *args)
    def more(self, *args): return _ifdh.ifdh_more(self, *args)
    def pin(self, *args): return _ifdh.ifdh_pin(self, *args)
    def chmod(self, *args): return _ifdh.ifdh_chmod(self, *args)
    def rename(self, *args): return _ifdh.ifdh_rename(self, *args)
    def ll(self, *args): return _ifdh.ifdh_ll(self, *args)
    def lss(self, *args): return _ifdh.ifdh_lss(self, *args)
    def findMatchingFiles(self, *args): return _ifdh.ifdh_findMatchingFiles(self, *args)
    def fetchSharedFiles(self, *args): return _ifdh.ifdh_fetchSharedFiles(self, *args)
    def locateFiles(self, *args): return _ifdh.ifdh_locateFiles(self, *args)
    def checksum(self, *args): return _ifdh.ifdh_checksum(self, *args)
    __swig_destroy__ = _ifdh.delete_ifdh
    __del__ = lambda self : None;
ifdh_swigregister = _ifdh.ifdh_swigregister
ifdh_swigregister(ifdh)
cvar = _ifdh.cvar



